class Solution:
    def longestValidParentheses(self, s: str) -> int:
        
        # O(n) time and space
        
        n = len(s) 
  
        # Create a stack and push -1 as initial index to it to avoid popping from an empty list first           time
        stk = [] 
        stk.append(-1)

        # Initialize result 
        result = 0

        # Traverse all characters of given string 
        for i in range(n): 
            

            # If opening bracket, push index of it 
            if s[i] == '(': 
                stk.append(i) 

            else:    # If closing bracket, i.e., str[i] = ')' 
                # Pop the previous opening bracket's index 
               
                stk.pop()
                print(stk)


                # Check if this length formed with base of 
                # current valid substring is more than max  
                # so far 
                # current index and top of the stack (len(stk) - 1)
                if len(stk) != 0: 
                    result = max(result, i - stk[len(stk)-1]) 
                    print(result)

                # If stack is empty. push current index as  
                # base for next valid substring (if any) 
                else: 
                    stk.append(i) 

        return result 
