"""
# Definition for a Node.
class Node:
    def __init__(self, val, neighbors):
        self.val = val
        self.neighbors = neighbors
"""
class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        
        nodes_map = {None: None}
        
        def dfs(node):
            
            if node not in nodes_map:
                
                ## make a copy of the node val
                copy = Node(val=node.val, neighbors=None)
                
                ## store it in map
                nodes_map[node] = copy
                
                ## recursively call neighbors
                copy.neighbors = [dfs(n) for n in node.neighbors]
                
            return nodes_map[node]
        
        return dfs(node)
